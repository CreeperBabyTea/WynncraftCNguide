import { o as onDispose, l as listenEvent, D as DOMEvent, s as scoped } from '../chunks/vidstack-fd2ab5eb.js';
import { d as canUsePictureInPicture, e as canUseVideoPresentation, b as canPlayHLSNatively } from '../chunks/vidstack-1d3e68d6.js';
import { H as HTMLMediaProvider } from '../chunks/vidstack-1565cf64.js';
import { a as TextTrack, T as TextTrackSymbol } from '../chunks/vidstack-52171b8a.js';

class NativeHLSTextTracks {
  constructor(_video, _context) {
    this.O = _video;
    this.wa = _context;
    _video.textTracks.onaddtrack = this.xa.bind(this);
    onDispose(this.ya.bind(this));
  }
  xa(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this.O, nativeTrack))
      return;
    const track = new TextTrack({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[TextTrackSymbol.za] = { track: nativeTrack };
    track[TextTrackSymbol.ia] = 2;
    track[TextTrackSymbol.Aa] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this.wa.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  ya() {
    this.O.textTracks.onaddtrack = null;
    for (const track of this.wa.textTracks) {
      const nativeTrack = track[TextTrackSymbol.za]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this.Ba = (active, event) => {
      this.g.delegate.f("picture-in-picture-change", {
        detail: active,
        trigger: event
      });
    };
    this.O = _video;
    this.g = _media;
    listenEvent(this.O, "enterpictureinpicture", this.Ca.bind(this));
    listenEvent(this.O, "leavepictureinpicture", this.Da.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this.O;
  }
  get supported() {
    return canUsePictureInPicture(this.O);
  }
  async enter() {
    return this.O.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  Ca(event) {
    this.Ba(true, event);
  }
  Da(event) {
    this.Ba(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this.Ea = "inline";
    this.O = _video;
    this.g = _media;
    listenEvent(this.O, "webkitpresentationmodechanged", this.ja.bind(this));
  }
  get Ha() {
    return canUseVideoPresentation(this.O);
  }
  async Ga(mode) {
    if (this.Ea === mode)
      return;
    this.O.webkitSetPresentationMode(mode);
  }
  ja() {
    const prevMode = this.Ea;
    this.Ea = this.O.webkitPresentationMode;
    this.g.player?.dispatch(
      new DOMEvent("video-presentation-change", {
        detail: this.Ea,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this.Ea === type || prevMode === type) {
        this.g.delegate.f(`${type}-change`, {
          detail: this.Ea === type,
          trigger: event
        });
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this.Fa = _presentation;
  }
  get active() {
    return this.Fa.Ea === "fullscreen";
  }
  get supported() {
    return this.Fa.Ha;
  }
  async enter() {
    this.Fa.Ga("fullscreen");
  }
  async exit() {
    this.Fa.Ga("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this.Fa = _presentation;
  }
  get active() {
    return this.Fa.Ea === "picture-in-picture";
  }
  get supported() {
    return this.Fa.Ha;
  }
  async enter() {
    this.Fa.Ga("picture-in-picture");
  }
  async exit() {
    this.Fa.Ga("inline");
  }
}

class VideoProvider extends HTMLMediaProvider {
  constructor(video, context) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    scoped(() => {
      if (canUseVideoPresentation(video)) {
        const presentation = new VideoPresentation(video, context);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if (canUsePictureInPicture(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, context);
      }
    }, this.scope);
  }
  get type() {
    return "video";
  }
  setup(context) {
    super.setup(context);
    if (canPlayHLSNatively(this.video)) {
      new NativeHLSTextTracks(this.video, context);
    }
    context.textRenderers.j(this.video);
    onDispose(() => {
      context.textRenderers.j(null);
    });
    if (this.type === "video")
      context.delegate.f("provider-setup", { detail: this });
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this.g;
  }
}

export { VideoProvider };
