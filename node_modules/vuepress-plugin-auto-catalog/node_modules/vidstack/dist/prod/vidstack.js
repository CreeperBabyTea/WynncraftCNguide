import { G as GroupedLog, T as Thumbnail, S as Slider } from './chunks/vidstack-01cf3c93.js';
export { A as ARIAKeyShortcuts, t as AudioProviderLoader, ah as AudioRadioGroup, r as AudioTrackList, W as CaptionButton, am as Captions, ai as CaptionsRadioGroup, ag as ChaptersRadioGroup, N as Controls, D as DefaultAudioLayout, I as DefaultLayout, c as DefaultVideoLayout, X as FullscreenButton, F as FullscreenController, al as Gesture, H as HLSProviderLoader, L as List, $ as LiveButton, j as MEDIA_KEY_SHORTCUTS, i as MediaControls, a as MediaPlayer, M as MediaProvider, h as MediaRemoteControl, a9 as Menu, aa as MenuButton, ad as MenuItems, ab as MenuPortal, Y as MuteButton, Z as PIPButton, U as PlayButton, P as PlayerQueryList, an as Poster, ak as QualityRadioGroup, af as Radio, ae as RadioGroup, g as ScreenOrientationController, _ as SeekButton, a8 as SliderChapters, a1 as SliderController, a4 as SliderPreview, a3 as SliderValue, a2 as SliderVideo, aj as SpeedRadioGroup, p as TextRenderers, q as TextTrackList, ap as ThumbnailsLoader, ao as Time, l as TimeRange, a7 as TimeSlider, R as ToggleButton, O as Tooltip, Q as TooltipContent, v as VideoProviderLoader, V as VideoQualityList, a6 as VolumeSlider, e as canFullscreen, J as defaultLayoutContext, d as formatSpokenTime, f as formatTime, K as getDefaultLayoutLang, o as getTimeRangesEnd, n as getTimeRangesStart, w as isAudioProvider, y as isHLSProvider, z as isHTMLAudioElement, C as isHTMLMediaElement, B as isHTMLVideoElement, x as isVideoProvider, m as mediaContext, k as mediaState, ac as menuPortalContext, E as sliderContext, a0 as sliderState, s as softResetMediaState, a5 as updateSliderPreviewPlacement, b as useDefaultLayoutContext } from './chunks/vidstack-01cf3c93.js';
import { D as DOMEvent, k as isString, l as listenEvent, u as useState } from './chunks/vidstack-fd2ab5eb.js';
export { q as appendTriggerEvent, n as findTriggerEvent, m as hasTriggerEvent, i as isKeyboardClick, t as isKeyboardEvent, r as isPointerEvent, w as walkTriggerEventChain } from './chunks/vidstack-fd2ab5eb.js';
import { T as TextTrackSymbol } from './chunks/vidstack-52171b8a.js';
export { a as TextTrack, f as findActiveCue, b as isCueActive, i as isTrackCaptionKind, o as observeActiveTextTrack } from './chunks/vidstack-52171b8a.js';
export { C as ControlsGroup, M as MenuItem, T as TooltipTrigger } from './chunks/vidstack-feada5fa.js';
export { c as canChangeVolume, a as canOrientScreen, b as canPlayHLSNatively, f as canRotateScreen, d as canUsePictureInPicture, e as canUseVideoPresentation } from './chunks/vidstack-1d3e68d6.js';
import './chunks/vidstack-d51d30f7.js';
import './chunks/vidstack-27a11379.js';

class Logger {
  constructor() {
    this.l = null;
  }
  error(...data) {
    return this.dispatch("error", ...data);
  }
  warn(...data) {
    return this.dispatch("warn", ...data);
  }
  info(...data) {
    return this.dispatch("info", ...data);
  }
  debug(...data) {
    return this.dispatch("debug", ...data);
  }
  errorGroup(title) {
    return new GroupedLog(this, "error", title);
  }
  warnGroup(title) {
    return new GroupedLog(this, "warn", title);
  }
  infoGroup(title) {
    return new GroupedLog(this, "info", title);
  }
  debugGroup(title) {
    return new GroupedLog(this, "debug", title);
  }
  setTarget(newTarget) {
    this.l = newTarget;
  }
  dispatch(level, ...data) {
    return this.l?.dispatchEvent(
      new DOMEvent("vds-log", {
        bubbles: true,
        composed: true,
        detail: { level, data }
      })
    ) || false;
  }
}

class LibASSTextRenderer {
  constructor(loader, config) {
    this.priority = 1;
    this.R = null;
    this.hb = null;
    this.ib = /(ssa|ass)$/;
    this.loader = loader;
    this.config = config;
  }
  canRender(track) {
    return !!track.src && (isString(track.type) && this.ib.test(track.type) || this.ib.test(track.src));
  }
  attach(video) {
    this.loader().then(async (mod) => {
      this.R = new mod.default({
        ...this.config,
        video,
        subUrl: this.hb?.src || ""
      });
      listenEvent(this.R, "ready", () => {
        const canvas = this.R?.kb;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this.R, "error", (event) => {
        if (this.hb) {
          this.hb[TextTrackSymbol.ia] = 3;
          this.hb.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this.jb();
    } else if (this.hb !== track) {
      this.R?.setTrackByUrl(track.src);
      this.hb = track;
    }
  }
  detach() {
    this.jb();
  }
  jb() {
    this.R?.freeTrack();
    this.hb = null;
  }
}

class SliderThumbnail extends Thumbnail {
  onAttach(el) {
    this.M = useState(Slider.state);
  }
  vd() {
    const { duration } = this.g.$state;
    return this.M.pointerRate() * duration();
  }
}

export { LibASSTextRenderer, Logger, Slider, SliderThumbnail, Thumbnail };
