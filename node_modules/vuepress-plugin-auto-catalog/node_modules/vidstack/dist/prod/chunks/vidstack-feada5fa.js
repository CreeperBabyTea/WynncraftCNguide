import { C as Component, a as setStyle, o as onDispose, v as useContext } from './vidstack-fd2ab5eb.js';
import { aq as FocusVisibleController, ar as tooltipContext, aa as MenuButton } from './vidstack-01cf3c93.js';
import { r as requestScopedAnimationFrame } from './vidstack-27a11379.js';

class ControlsGroup extends Component {
  onAttach(el) {
    setStyle(el, "pointer-events", "auto");
  }
}

class TooltipTrigger extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  onConnect(el) {
    onDispose(
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        this.Vc();
        const tooltip = useContext(tooltipContext);
        onDispose(() => {
          const button = this.Uc();
          button && tooltip.Oc(button);
        });
      })
    );
  }
  Vc() {
    const button = this.Uc(), tooltip = useContext(tooltipContext);
    button && tooltip.Nc(button);
  }
  Uc() {
    return this.el.firstElementChild?.getAttribute("role") === "button" ? this.el.firstElementChild : this.el;
  }
}

class MenuItem extends MenuButton {
}

export { ControlsGroup as C, MenuItem as M, TooltipTrigger as T };
