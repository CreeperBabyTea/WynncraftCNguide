import { T as Thumbnail, S as Slider } from './chunks/vidstack-1c6c4f6e.js';
export { A as ARIAKeyShortcuts, v as AudioProviderLoader, ah as AudioRadioGroup, t as AudioTrackList, W as CaptionButton, am as Captions, ai as CaptionsRadioGroup, ag as ChaptersRadioGroup, N as Controls, D as DefaultAudioLayout, I as DefaultLayout, c as DefaultVideoLayout, X as FullscreenButton, F as FullscreenController, al as Gesture, H as HLSProviderLoader, e as List, $ as LiveButton, L as Logger, k as MEDIA_KEY_SHORTCUTS, j as MediaControls, a as MediaPlayer, M as MediaProvider, i as MediaRemoteControl, a9 as Menu, aa as MenuButton, ad as MenuItems, ab as MenuPortal, Y as MuteButton, Z as PIPButton, U as PlayButton, P as PlayerQueryList, an as Poster, ak as QualityRadioGroup, af as Radio, ae as RadioGroup, h as ScreenOrientationController, _ as SeekButton, a8 as SliderChapters, a1 as SliderController, a4 as SliderPreview, a3 as SliderValue, a2 as SliderVideo, aj as SpeedRadioGroup, q as TextRenderers, r as TextTrackList, ap as ThumbnailsLoader, ao as Time, n as TimeRange, a7 as TimeSlider, R as ToggleButton, O as Tooltip, Q as TooltipContent, w as VideoProviderLoader, V as VideoQualityList, a6 as VolumeSlider, g as canFullscreen, J as defaultLayoutContext, d as formatSpokenTime, f as formatTime, K as getDefaultLayoutLang, p as getTimeRangesEnd, o as getTimeRangesStart, x as isAudioProvider, z as isHLSProvider, B as isHTMLAudioElement, E as isHTMLMediaElement, C as isHTMLVideoElement, y as isVideoProvider, m as mediaContext, l as mediaState, ac as menuPortalContext, G as sliderContext, a0 as sliderState, s as softResetMediaState, a5 as updateSliderPreviewPlacement, b as useDefaultLayoutContext } from './chunks/vidstack-1c6c4f6e.js';
import { T as TextTrackSymbol } from './chunks/vidstack-dd29a7a5.js';
export { a as TextTrack, f as findActiveCue, b as isCueActive, i as isTrackCaptionKind, o as observeActiveTextTrack } from './chunks/vidstack-dd29a7a5.js';
import { k as isString, l as listenEvent, D as DOMEvent, u as useState } from './chunks/vidstack-b8ba7e3c.js';
export { q as appendTriggerEvent, n as findTriggerEvent, m as hasTriggerEvent, i as isKeyboardClick, t as isKeyboardEvent, r as isPointerEvent, w as walkTriggerEventChain } from './chunks/vidstack-b8ba7e3c.js';
export { C as ControlsGroup, M as MenuItem, T as TooltipTrigger } from './chunks/vidstack-5ca95e20.js';
export { c as canChangeVolume, a as canOrientScreen, b as canPlayHLSNatively, f as canRotateScreen, d as canUsePictureInPicture, e as canUseVideoPresentation } from './chunks/vidstack-e4c46e48.js';
import './chunks/vidstack-ba5dcbce.js';
import './chunks/vidstack-b97c0002.js';
import 'media-captions';

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this._instance = null;
    this._track = null;
    this._typeRE = /(ssa|ass)$/;
  }
  canRender(track) {
    return !!track.src && (isString(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));
  }
  attach(video) {
    this.loader().then(async (mod) => {
      this._instance = new mod.default({
        ...this.config,
        video,
        subUrl: this._track?.src || ""
      });
      listenEvent(this._instance, "ready", () => {
        const canvas = this._instance?._canvas;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this._instance, "error", (event) => {
        if (this._track) {
          this._track[TextTrackSymbol._readyState] = 3;
          this._track.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this._freeTrack();
    } else if (this._track !== track) {
      this._instance?.setTrackByUrl(track.src);
      this._track = track;
    }
  }
  detach() {
    this._freeTrack();
  }
  _freeTrack() {
    this._instance?.freeTrack();
    this._track = null;
  }
}

class SliderThumbnail extends Thumbnail {
  onAttach(el) {
    this._slider = useState(Slider.state);
  }
  _getTime() {
    const { duration } = this._media.$state;
    return this._slider.pointerRate() * duration();
  }
}

{
  console.warn("[vidstack]: dev mode!");
}

export { LibASSTextRenderer, Slider, SliderThumbnail, Thumbnail };
